#lang pollen

â—Šdiv[#:class "flex bg-prussian"]{
  â—Šdiv[#:class "flex flex-col justify-between mx-auto min-h-screen max-w-screen-xl px-4 pt-12 md:px-8 md:pt-20 lg:px-16 text-zinc-300"]{
    â—Šdiv[#:class "my-6"]{
      â—Šh1[#:class "my-4 text-4xl text-engineering-light font-mono tracking-tighter leading-snug text-center"]{Politik nervt â€”}
      â—Šp[#:class "my-2 sm:text-lg leading-relaxed text-center"]{Many tools and languages make it easy to add accidental complexity.}
      â—Šp[#:class "my-2 sm:text-lg leading-relaxed text-center"]{Accidental complexity creates unnecessary cognitive load.}
      â—Šp[#:class "my-2 sm:text-lg leading-relaxed text-center"]{If we constantly battle cognitive load, we get exhausted, unhappy and frustrated.}
    }

    â—Šdiv[#:class "my-6"]{
      â—Šh1[#:class "my-4 text-4xl text-engineering-light font-mono tracking-tighter leading-snug text-center"]{
        aber â—Šspan[#:class "italic"]{muss} das so sein?
      }
      â—Šp[#:class "my-2 sm:text-lg leading-relaxed text-center"]{There are tools and techniques that manage complexity well.}
      â—Šp[#:class "my-2 sm:text-lg leading-relaxed text-center"]{
        Using those tools and techniques â—Šspan[#:class "italic"]{reduces} cognitive load.
      }
      â—Šp[#:class "my-2 sm:text-lg leading-relaxed text-center"]{So that you can be energetic, happy and joyful while coding.}
    }

    â—Šdiv[#:class "mx-auto"]{
      â—Ša[#:href "#meetup" #:class "mb-4 flex flex-col gap-2 items-center hover:text-engineering-light focus-visible:text-engineering-light duration-300"]{
        â—Šspan[#:class "text-xl text-engineering-light font-mono tracking-tighter leading-snug"]{Interested?}
        â—Šsvg[#:xmlns "http://www.w3.org/2000/svg" #:fill "none" #:viewBox "0 0 24 24" #:stroke-width "1" #:stroke "currentColor" #:class "size-16"]{
          â—Špath[#:stroke-linecap "round" #:stroke-linejoin "round" #:d "m19.5 8.25-7.5 7.5-7.5-7.5"]
        }
      }
    }
  }
}
â—Šdiv[#:class "bg-white"]{
  â—Šdiv[#:id "meetup" #:class "min-h-[94vh] text-zinc-700 mx-auto h-full max-w-screen-md px-6 pt-12 md:px-12 md:pt-20 lg:px-24"]{
    â—Šheading["About"]
    â—Špar{Hi ðŸ‘‹}
    â—Špar{
      We're â—Šlink["https://www.linkedin.com/in/dirk-hÃ¼sken-414b8b101"]{Dirk}, â—Šlink["https://www.linkedin.com/in/thomas-graf-253629ba"]{Thomas}, â—Šlink["https://binderdavid.github.io"]{David} and â—Šlink["https://me.beathagenlocher.com"]{Beat} and we thought it would be nice if the wonderful city of TÃ¼bingen had a functional programming meetup (again!).
    }
    â—Špar{
      We want to create a space where people interested in functional programming can meet and learn from each other. To achieve this, we will start off with talks, followed by food and an open exchange between the participants.
    } 
    â—Špar{
      Looking forward to see you at the next edition of â—Šlink["https://www.meetup.com/tu-lambda/"]{TÃ¼.Î»â€”Functional Programming Night TÃ¼bingen}!
    }
    â—Šmeetups{
      â—Šmeetup[#:title "15.01.25"]{
        â—Špar{
          The next meetup will take place on the 15.01.25 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Talk 1} (maybe you?)}
          â—Šabstract{
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Talk 2} (maybe you?)}
          â—Šabstract{
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
      â—Šmeetup[#:title "06.11.24"]{
        â—Špar{
          This meetup took place on the 06.11.24 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šlink["https://marvinborner.github.io/tuela24/1"]{â—Šspan[#:class "font-medium"]{Really Functional Data Structures}} (Marvin)}
          â—Šabstract{
			      Last time, David showed us functional data structures in the form of persistent data structures. In this talk, I want to show you data structures that are defined entirely by functions themselves - no classes, structs, bitmaps, etc.! Knowing about such structures not only tickles the brain, but can also lead to a better intuition for solving problems functionally. Furthermore, one of the data structures shown can be used for space-efficient encodings of fractals and fun animations.
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{â—Šlink["assets/slides/2024-11-06_markus-schlegel-decoupled-by-default.pdf"]{â—Šspan[#:class "font-medium"]{Decoupled by Default â€“ Funktionale Programmierung in der Softwarearchitektur}} (Markus)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{Kopplung â€“ das MaÃŸ der AbhÃ¤ngigkeiten zwischen Modulen â€“ ist das zentrale Konzept der Softwarearchitektur. Die herkÃ¶mmliche Sicht auf Kopplung ist die, dass hohe Kopplung dann entsteht, wenn man nicht aufpasst beim Programmieren: wenn man â—Šspan[#:class "font-medium"]{nicht} gegen explizite Schnittstellen programmiert, wenn man â—Šspan[#:class "font-medium"]{kein} Visitor-Pattern verwendet, wenn man â—Šspan[#:class "font-medium"]{nicht} Dependency Injection verwendet â€¦
          }
          â—Šp[#:class "my-2"]{
            Kopplung, so scheint es, ist das Resultat von Unterlassung. Die Kopplung wieder zu senken, erfordert dann ausdrÃ¼ckliche GegenmaÃŸnahmen.
          }
          â—Šp[#:class "my-2"]{
            Dieser Vortrag zeigt eine alternative Sichtweise: Viele Arten von Kopplung entstehen aufgrund von UnzulÃ¤nglichkeiten der Programmiersprache. In funktionalen Sprachen treten diese Kopplungsarten teilweise gar nicht auf oder zumindest ist die Werkseinstellung dieser Sprachen dergestalt, dass Kopplung vermieden wird. Das zeigen wir im Vortrag insbesondere mit Blick auf den Umgang mit geteiltem Zustand und PlattformabhÃ¤ngigkeiten. Am Ende zeigen wir, dass auch funktionale Programmierer nicht automatisch vor allen Arten unnÃ¶tiger Kopplung sicher sind. Wir zeigen, wie der Ansatz des Denotational Design dort Abhilfe schaffen kann, indem die Semantik von Schnittstellen in den Vordergrund gerÃ¼ckt wird.
          }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
      â—Šmeetup[#:title "28.08.24"]{
        â—Špar{
          This meetup took place on the 28.08.24 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18.45 Doors open & Welcome}
          â—Šp{â—Šlink["https://haglobah.github.io/talks/2024-08-28/"]{â—Šspan[#:class "font-medium"]{Simple development environments with Nix}} (Beat)}
          â—Šabstract{
            Setting up development environments is more complex than it should be. Nix makes entering development environments as easy as running nix develop, making them simple and reproducible. This talk explores what an ideal workflow could look like and walks through a project setup with Nix, outlining its benefits and deficiencies.
          }
          â—Šorga{Short break}
          â—Šp{â—Šlink["https://binderdavid.github.io/talks/VortragHAMT.pdf"]{â—Šspan[#:class "font-medium"]{Persistent Data Structures: From Lists to Hashmaps}} (David)}
          â—Šabstract{
            Functional programmers cannot use the same data structures and algorithms that imperative programmers are used to. Functional data structures make it easier to reason about what our code does, but have different performance characteristics. This talk will introduce some of the basic and advanced techniques we use when we implement functional data structures efficiently.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
    }

    â—Špar{
      If you want to attend the meetup, please â—Šlink["https://www.meetup.com/tu-lambda/"]{tell us about it} so that we can plan accordingly ðŸ˜Š
    }
        
    â—Šheading["Contact"]
    â—Šdiv[#:class "pb-6"]{
      â—Špar{
        Do you want to keep posted about the next event or continue the discussion? Maybe you even want to contribute a talk yourself?
      }
      â—Ša[#:href "https://matrix.to/#/#functional-programming-night-tuebingen:matrix.org" #:class "ml-4 inline-flex gap-4 items-center hover:text-engineering focus-visible:text-engineering duration-300"]{
        â—Šsvg[#:xmlns "http://www.w3.org/2000/svg" #:fill "none" #:viewBox "0 0 24 24" #:stroke-width "1" #:stroke "currentColor" #:class "size-8"]{
            â—Špath[#:stroke-linecap "round" #:stroke-linejoin "round" #:d "M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"]
        }
        â—Šspan[#:class "text-xl font-mono tracking-tighter leading-snug"]{
          Join our Matrix Room
        }
      }
    }
  }        
}

