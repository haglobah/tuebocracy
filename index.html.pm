#lang pollen

â—Šdiv[#:class "flex bg-prussian"]{
  â—Šdiv[#:class "flex flex-col justify-between mx-auto min-h-screen max-w-screen-xl px-4 pt-12 md:px-8 md:pt-20 lg:px-16 text-zinc-300"]{
    â—Šdiv[#:class "my-6 mx-2 sm:mx-4 md:mx-auto"]{
      â—Šh1[#:class "my-4 text-4xl text-engineering-light font-mono tracking-tighter leading-snug"]{Politik nervt â€”}
      â—Šp[#:class "sm:text-lg leading-relaxed"]{
        Wir sind (zu Recht) unglÃ¼cklich. Es laufen Dinge falsch:
      }
      â—Šp[#:class "sm:text-lg leading-relaxed"]{
        Im GroÃŸen, aber auch im ganz Kleinen.
      }
      â—Šp[#:class "mt-4 sm:text-lg leading-relaxed"]{
        Hat viele GrÃ¼nde â€“ aber unter anderem auch, dass:
      }
      â—Šul[#:class "list-disc list-inside sm:text-lg leading-relaxed"]{
        â—Šli[]{das Problem nicht bekannt ist}
        â—Šli[]{keine (guten) LÃ¶sungen/LÃ¶sungsideen existieren}
      }
      â—Šp[#:class "my-4 sm:text-lg leading-relaxed"]{
        Wenn die Stadtverwaltung das Problem nicht kennt, und/oder keine LÃ¶sungsideen existieren, macht sie: Nichts.
      }
      â—Šp[#:class "my-4 sm:text-lg leading-relaxed"]{
        Und das macht â—Šspan[#:class "italic"]{uns} wieder genervt von Politik.
      }
    }

    â—Šdiv[#:class "my-6 mx-2 sm:mx-4 md:mx-auto"]{
      â—Šh1[#:class "my-4 text-4xl text-engineering-light font-mono tracking-tighter leading-snug"]{
        aber â—Šspan[#:class "italic"]{muss} das so sein?
      }
      â—Šp[#:class "my-4 sm:text-lg leading-relaxed"]{
        Well, das muss es nicht. Es gibt viele Punkte, an denen wir der Stadt guten Input geben kÃ¶nnen.
      }
      â—Šp[#:class "my-4 sm:text-lg leading-relaxed"]{
        Wenn wir der Stadt guten Input geben, kann die bessere Entscheidungen treffen, die gut fÃ¼r mehr TÃ¼binger:innen sind.
      }
      â—Šp[#:class "my-4 sm:text-lg leading-relaxed"]{
        Und wenn wir dabei mitwirken, dass die Stadt bessere Entscheidungen trifft, fÃ¼hlt sich das gut fÃ¼r uns an, die Stadt freut sich, und â€“ (Trommelwirbel) ... wir haben eine bessere Stadt.
      }
      â—Šp[#:class "my-4 sm:text-lg leading-relaxed"]{
        Und das fÃ¼hrt langfristig dazu, dass wir eine Stadt haben, die wir mitgestaltet haben â€“ wir sind glÃ¼cklicher, und fÃ¼hlen uns hier noch mehr zu Hause.
      }
    }

    â—Šdiv[#:class "px-auto"]{
      â—Ša[#:href "#projekt" #:class "p-2 flex flex-col gap-2 items-center hover:text-engineering-light focus-visible:text-engineering-light duration-300"]{
        â—Šspan[#:class "text-2xl text-engineering-light font-mono tracking-tighter leading-snug"]{Klingt gut?}
        â—Šsvg[#:xmlns "http://www.w3.org/2000/svg" #:fill "none" #:viewBox "0 0 24 24" #:stroke-width "1" #:stroke "currentColor" #:class "size-16"]{
          â—Špath[#:stroke-linecap "round" #:stroke-linejoin "round" #:d "m19.5 8.25-7.5 7.5-7.5-7.5"]
        }
      }
    }
  }
}
â—Šdiv[#:class "bg-white"]{
  â—Šdiv[#:id "projekt" #:class "min-h-[94vh] text-zinc-700 mx-auto h-full max-w-screen-md px-6 pt-12 md:px-12 md:pt-20 lg:px-24"]{
    â—Šheading["Ãœber uns"]
    â—Špar{Hi ðŸ‘‹}
    â—Špar{
      Wir sind BÃ¼rger:innen TÃ¼bingens.
     }
    â—Špar{
      Wir haben Ahnung von Dingen, die in TÃ¼bigen passieren. Wir interessieren uns fÃ¼r Dinge, die in TÃ¼bingen passieren. Und wir haben Ideen dafÃ¼r, wie und welche Dingen in TÃ¼bingen passieren sollten.
    }
    â—Špar{
      Und das Gute an TÃ¼bingen ist: Die Stadt will das auch.
    }
    â—Špar{
      Hier auf dieser Seite sammeln wir alle Projekte, bei denen die Stadt sich Input von uns wÃ¼nscht â€“ und alle Orte, an denen wir der Stadt Anregungen geben kÃ¶nnen.
    }
    â—Šprojekte{
      â—Šprojekt[#:title "Neckarthon TÃ¼bingen"]{
        â—Špar{
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Talk 1} (maybe you?)}
          â—Šabstract{
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{â—Šspan[#:class "font-medium"]{Talk 2} (maybe you?)}
          â—Šabstract{
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
      â—Šprojekt[#:title "06.11.24"]{
        â—Špar{
          This projekt took place on the 06.11.24 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18:45 Doors open & Welcome}
          â—Šp[#:class ""]{â—Šlink["https://marvinborner.github.io/tuela24/1"]{â—Šspan[#:class "font-medium"]{Really Functional Data Structures}} (Marvin)}
          â—Šabstract{
			      Last time, David showed us functional data structures in the form of persistent data structures. In this talk, I want to show you data structures that are defined entirely by functions themselves - no classes, structs, bitmaps, etc.! Knowing about such structures not only tickles the brain, but can also lead to a better intuition for solving problems functionally. Furthermore, one of the data structures shown can be used for space-efficient encodings of fractals and fun animations.
          }
          â—Šorga{Short break}
          â—Šp[#:class ""]{â—Šlink["assets/slides/2024-11-06_markus-schlegel-decoupled-by-default.pdf"]{â—Šspan[#:class "font-medium"]{Decoupled by Default â€“ Funktionale Programmierung in der Softwarearchitektur}} (Markus)}
          â—Šabstract{
            â—Šp[#:class "my-2"]{Kopplung â€“ das MaÃŸ der AbhÃ¤ngigkeiten zwischen Modulen â€“ ist das zentrale Konzept der Softwarearchitektur. Die herkÃ¶mmliche Sicht auf Kopplung ist die, dass hohe Kopplung dann entsteht, wenn man nicht aufpasst beim Programmieren: wenn man â—Šspan[#:class "font-medium"]{nicht} gegen explizite Schnittstellen programmiert, wenn man â—Šspan[#:class "font-medium"]{kein} Visitor-Pattern verwendet, wenn man â—Šspan[#:class "font-medium"]{nicht} Dependency Injection verwendet â€¦
          }
          â—Šp[#:class "my-2"]{
            Kopplung, so scheint es, ist das Resultat von Unterlassung. Die Kopplung wieder zu senken, erfordert dann ausdrÃ¼ckliche GegenmaÃŸnahmen.
          }
          â—Šp[#:class "my-2"]{
            Dieser Vortrag zeigt eine alternative Sichtweise: Viele Arten von Kopplung entstehen aufgrund von UnzulÃ¤nglichkeiten der Programmiersprache. In funktionalen Sprachen treten diese Kopplungsarten teilweise gar nicht auf oder zumindest ist die Werkseinstellung dieser Sprachen dergestalt, dass Kopplung vermieden wird. Das zeigen wir im Vortrag insbesondere mit Blick auf den Umgang mit geteiltem Zustand und PlattformabhÃ¤ngigkeiten. Am Ende zeigen wir, dass auch funktionale Programmierer nicht automatisch vor allen Arten unnÃ¶tiger Kopplung sicher sind. Wir zeigen, wie der Ansatz des Denotational Design dort Abhilfe schaffen kann, indem die Semantik von Schnittstellen in den Vordergrund gerÃ¼ckt wird.
          }
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
      â—Šprojekt[#:title "28.08.24"]{
        â—Špar{
          This projekt took place on the 28.08.24 at the â—Šlink["https://itdesign.de/"]{itdesign office}, FriedrichstraÃŸe 12.
        }
        â—Šdiv[#:class "mx-2 my-4 sm:text-lg leading-relaxed"]{
          â—Šorga{18.45 Doors open & Welcome}
          â—Šp{â—Šlink["https://haglobah.github.io/talks/2024-08-28/"]{â—Šspan[#:class "font-medium"]{Simple development environments with Nix}} (Beat)}
          â—Šabstract{
            Setting up development environments is more complex than it should be. Nix makes entering development environments as easy as running nix develop, making them simple and reproducible. This talk explores what an ideal workflow could look like and walks through a project setup with Nix, outlining its benefits and deficiencies.
          }
          â—Šorga{Short break}
          â—Šp{â—Šlink["https://binderdavid.github.io/talks/VortragHAMT.pdf"]{â—Šspan[#:class "font-medium"]{Persistent Data Structures: From Lists to Hashmaps}} (David)}
          â—Šabstract{
            Functional programmers cannot use the same data structures and algorithms that imperative programmers are used to. Functional data structures make it easier to reason about what our code does, but have different performance characteristics. This talk will introduce some of the basic and advanced techniques we use when we implement functional data structures efficiently.
          }
          â—Šorga{Food, talking, coding, whatever}
          â—Šorga{22.00 End}
        }
      }
    }

    â—Špar{
      Wenn euch das SpaÃŸ gemacht hat, â—Šlink["https://www.projekt.com/tu-lambda/"]{teilt} es gerne! ðŸ˜Š
    }
        
    â—Šheading["Kontakt"]
    â—Šdiv[#:class "pb-6"]{
      â—Špar{
        Funktioniert was nicht, wie es soll?
        â—Šbr{}
        Haben wir ein Projekt vergessen?
        â—Šbr{}
        Gibt's irgendwas, das wir anders machen kÃ¶nnten/sollen?
      }
      â—Šdiv[#:class "flex items-center gap-4 my-4 sm:text-lg leading-relaxed"]{
        â—Šspan[#:class ""]{
          Schreibt uns:
        }
        â—Ša[#:href "mailto:bah@posteo.de" #:class "hover:text-engineering focus-visible:text-engineering duration-300"]{
          â—Šdiv[#:class "i-heroicons:envelope size-10"]{}
        }
      }
    }
  }        
}

